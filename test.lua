local base64 = require('gamesense/base64')
local ffi = require("ffi")
local http = require("gamesense/http")
local hwid_valid = false
local function check_loader_environment()
    if _G["LOADER_ENV"] ~= true or _G["LOADER_ID"] ~= "unique_loader_identifier_12345" then
        print("joker xaxaxa")
        return false
    end
    return true
end
local pastebin_hwid_url = "https://pastebin.com/015e95ac"


print("Loader HWID: " .. HWID)  -- 打印从加载器传递的 HWID
local function get_hwids_from_pastebin()
    http.get(pastebin_hwid_url, function(success, response)
        if not success then
            return
        end
        local hwids = response.body

        if hwids:find(current_hwid) then
            hwid_valid = true
        else
            hwid_valid = false
        end
    end)
end
get_hwids_from_pastebin()
if check_loader_environment() and hwid_valid then
    local base64_string = ""

    local decoded_script = base64.decode(base64_string)

    local script, err = loadstring(decoded_script)
    if script then
        script()  
    else
        print("Error loading script: " .. (err or "Unknown error"))
    end
else
    return
end
